Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException
Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException.ConfigurationMissingException() -> void
Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException.ConfigurationMissingException(string! message) -> void
Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException.ConfigurationMissingException(string! message, System.Exception! innerException) -> void
Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions
Microsoft.Extensions.Hosting.Validators.TemporalOptionsValidator
Microsoft.Extensions.Hosting.Validators.TemporalOptionsValidator.TemporalOptionsValidator() -> void
Microsoft.Extensions.Hosting.Validators.TemporalOptionsValidator.Validate(string? name, Escendit.Extensions.Hosting.Abstractions.TemporalOptions! options) -> Microsoft.Extensions.Options.ValidateOptionsResult!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetClustering(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetPersistence(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string name, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetPersistenceAsDefault(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetReminders(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddNatsStreams(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, string! name = "Platform", string! connectionStringName = "nats") -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddTemporalClient(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, string! serviceName = "temporal") -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddTemporalClient(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, System.Action<Temporalio.Client.TemporalClientConnectOptions!>! configureOptions, string! serviceName = "temporal") -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddTemporalWorkerService(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, string! serviceName = "temporal", string? buildId = null) -> Temporalio.Extensions.Hosting.ITemporalWorkerServiceOptionsBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddTemporalWorkerService(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, System.Action<Escendit.Extensions.Hosting.Abstractions.TemporalOptions!>! configureOptions, string! serviceName = "temporal", string? buildId = null) -> Temporalio.Extensions.Hosting.ITemporalWorkerServiceOptionsBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.UseRuntimeServer(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder) -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.UseUserSecrets<TType>(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder) -> Microsoft.Extensions.Hosting.HostApplicationBuilder
