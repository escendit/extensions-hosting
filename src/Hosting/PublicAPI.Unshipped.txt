Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException
Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException.ConfigurationMissingException() -> void
Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException.ConfigurationMissingException(string! message) -> void
Escendit.Extensions.Hosting.Exceptions.ConfigurationMissingException.ConfigurationMissingException(string! message, System.Exception! innerException) -> void
Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetClustering(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetPersistence(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string name, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetPersistenceAsDefault(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddAdoNetReminders(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder, string connectionStringName = "cluster", string connectionStringInvariant = "Npgsql") -> Microsoft.Extensions.Hosting.HostApplicationBuilder
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddKeyedTemporalClient(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, string! clientName, string! clientNamespace) -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddNatsStreams(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, string! name = "Platform", string! connectionStringName = "nats") -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddOrleansServerRuntime(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder) -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddServiceDefaults(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, System.Func<OpenTelemetry.Trace.TracerProviderBuilder!, OpenTelemetry.Trace.TracerProviderBuilder!>? tracerProviderBuilder = null, System.Func<OpenTelemetry.Metrics.MeterProviderBuilder!, OpenTelemetry.Metrics.MeterProviderBuilder!>? metersProviderBuilder = null) -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddTemporalHostedService(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder) -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddTemporalHostedService(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, string! name, System.Action<Microsoft.Extensions.DependencyInjection.ITemporalBuilder!>! configureOptions) -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.AddTemporalHostedService(this Microsoft.Extensions.Hosting.HostApplicationBuilder! builder, System.Action<Microsoft.Extensions.DependencyInjection.ITemporalBuilder!>! configureOptions) -> Microsoft.Extensions.Hosting.HostApplicationBuilder!
static Microsoft.Extensions.Hosting.HostApplicationBuilderExtensions.UseUserSecrets<TType>(this Microsoft.Extensions.Hosting.HostApplicationBuilder builder) -> Microsoft.Extensions.Hosting.HostApplicationBuilder
